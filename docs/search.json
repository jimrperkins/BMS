[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "BMS",
    "section": "",
    "text": "Preface\nEste material está diseñado para acompañar las sesiones prácticas de la asignatura “Biología Molecular de Sistemas”, que forma parte del grado de Bioquímica en la Universidad de Málaga. Se divide en 3 partes: una reintroducción a R, que estudiarás en un seminario de una hora, y 2 partes más extensas, donde utilizarás R para construir y analizar redes biológicas.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "reintro_a_r.html",
    "href": "reintro_a_r.html",
    "title": "1  (Re)introducción a R para Biología y Bioinformática",
    "section": "",
    "text": "1.1 Objetivos\nAl final de este tutorial, podrás: - Entender la sintaxis básica y la estructura de R - Realizar operaciones simples con datos - Crear gráficos básicos relevantes para la biología y la bioinformática - Entender los conceptos básicos del análisis de redes con igraph",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>(Re)introducción a R para Biología y Bioinformática</span>"
    ]
  },
  {
    "objectID": "reintro_a_r.html#comenzando",
    "href": "reintro_a_r.html#comenzando",
    "title": "1  (Re)introducción a R para Biología y Bioinformática",
    "section": "1.2 Comenzando",
    "text": "1.2 Comenzando\nR es un lenguaje poderoso para la computación estadística y gráfica, ampliamente utilizado en bioinformática. Para empezar a usar R, necesitas tener R y RStudio instalados en tu ordenador. Puedes descargarlos desde los siguientes enlaces: - Descargar R - Descargar RStudio",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>(Re)introducción a R para Biología y Bioinformática</span>"
    ]
  },
  {
    "objectID": "reintro_a_r.html#sintaxis-básica",
    "href": "reintro_a_r.html#sintaxis-básica",
    "title": "1  (Re)introducción a R para Biología y Bioinformática",
    "section": "1.3 Sintaxis Básica",
    "text": "1.3 Sintaxis Básica\nComencemos con algunos comandos y operaciones básicas en R. Abre RStudio y prueba los siguientes ejemplos.\n\n1.3.1 Aritmética Básica\nEl contenido de GC se refiere al porcentaje de bases nitrogenadas guanina (G) y citosina (C) en una molécula de ADN. Es una medida importante porque:\n\nEstabilidad del ADN: Las regiones del ADN con alto contenido de GC son más estables debido al triple enlace de hidrógeno entre G y C, en comparación con el doble enlace de A y T.\nEvolución y Adaptación: Las diferencias en el contenido de GC pueden reflejar adaptaciones evolutivas a diferentes temperaturas ambientales, ya que las regiones con alto GC pueden ser más resistentes al calor.\nFunción Genómica: Algunas regiones funcionales del genoma, como los promotores de genes y las islas CpG, tienden a tener un alto contenido de GC, lo cual es crucial para la regulación genética.\n\n\n# Calcular el contenido de GC de una secuencia de ADN\ng &lt;- 200\nc &lt;- 180\na &lt;- 150\nt &lt;- 170\n\n# Número total de nucleótidos\ntotal_nt &lt;- g + c + a + t\n\n# Porcentaje de contenido de GC\ngc_content &lt;- ((g + c) / total_nt) * 100\ngc_content\n\n[1] 54.28571\n\n\n\n\n1.3.2 Asignación de Variables\nEn R, puedes asignar valores a variables utilizando el operador &lt;-. Una variable es una forma de almacenar información que puedes usar y manipular más adelante.\n\n# Asignar longitudes de secuencias de ADN a variables\nlength_gene1 &lt;- 1500\nlength_gene2 &lt;- 1200\n\n# Imprimir las variables\nlength_gene1\n\n[1] 1500\n\nlength_gene2\n\n[1] 1200\n\n# Realizar operaciones con variables\ntotal_length &lt;- length_gene1 + length_gene2\ntotal_length\n\n[1] 2700\n\n\n\n\n1.3.3 Tipos de Datos\nR tiene varios tipos de datos, incluyendo numeric (números), character (texto) y lógicos (TRUE/FALSE).\n\n# Numérico\nsequence_length &lt;- 1500\nclass(sequence_length)\n\n[1] \"numeric\"\n\n# Caracter\nspecies &lt;- \"Homo sapiens\"\nclass(species)\n\n[1] \"character\"\n\n# Lógico\nis_protein_coding &lt;- TRUE\nclass(is_protein_coding)\n\n[1] \"logical\"",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>(Re)introducción a R para Biología y Bioinformática</span>"
    ]
  },
  {
    "objectID": "reintro_a_r.html#estructuras-de-datos-básicas",
    "href": "reintro_a_r.html#estructuras-de-datos-básicas",
    "title": "1  (Re)introducción a R para Biología y Bioinformática",
    "section": "1.4 Estructuras de Datos Básicas",
    "text": "1.4 Estructuras de Datos Básicas\nR proporciona varias estructuras de datos como vectores, matrices, listas y data frames. Vamos a explorar algunas de estas.\n\n1.4.1 Vectores\nLos vectores son la estructura de datos más básica en R y pueden contener una secuencia de elementos del mismo tipo.\n\n# Crear un vector numérico de longitudes de genes\ngene_lengths &lt;- c(1000, 1500, 2000, 2500, 3000)\ngene_lengths\n\n[1] 1000 1500 2000 2500 3000\n\n# Crear un vector de caracteres de nombres de genes\ngene_names &lt;- c(\"GeneA\", \"GeneB\", \"GeneC\", \"GeneD\", \"GeneE\")\ngene_names\n\n[1] \"GeneA\" \"GeneB\" \"GeneC\" \"GeneD\" \"GeneE\"\n\n\n\n\n1.4.2 Data Frames\nLos data frames se utilizan para almacenar datos tabulares. Piensa en un data frame como una tabla donde cada columna puede contener diferentes tipos de datos (numéricos, caracteres, etc.).\n\n# Crear un data frame con información de genes\ngenes_df &lt;- data.frame(\n  Name = gene_names,\n  Length = gene_lengths,\n  GC_Content = c(45, 50, 55, 47, 52)\n)\ngenes_df\n\n   Name Length GC_Content\n1 GeneA   1000         45\n2 GeneB   1500         50\n3 GeneC   2000         55\n4 GeneD   2500         47\n5 GeneE   3000         52\n\n# Acceder a elementos del data frame\ngenes_df$Name       # Acceder a una columna por nombre\n\n[1] \"GeneA\" \"GeneB\" \"GeneC\" \"GeneD\" \"GeneE\"\n\ngenes_df[1, ]       # Acceder a la primera fila\n\n   Name Length GC_Content\n1 GeneA   1000         45\n\ngenes_df[, \"Length\"] # Acceder a una columna por nombre usando índices\n\n[1] 1000 1500 2000 2500 3000",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>(Re)introducción a R para Biología y Bioinformática</span>"
    ]
  },
  {
    "objectID": "reintro_a_r.html#graficación-básica",
    "href": "reintro_a_r.html#graficación-básica",
    "title": "1  (Re)introducción a R para Biología y Bioinformática",
    "section": "1.5 Graficación Básica",
    "text": "1.5 Graficación Básica\nR es bien conocido por sus potentes capacidades de graficación. Aquí, crearemos un gráfico simple usando la función incorporada plot.\n\n1.5.1 Gráfico de Dispersión\n\n# Gráfico de dispersión básico de longitudes de genes vs contenido de GC\nplot(genes_df$Length, genes_df$GC_Content, main=\"Longitud de Genes vs Contenido de GC\", xlab=\"Longitud de Genes\", ylab=\"Contenido de GC (%)\")\n\n\n\n\n\n\n\n\n\n\n1.5.2 Histograma\n\n# Histograma básico de longitudes de genes\nhist(genes_df$Length, main=\"Distribución de Longitudes de Genes\", xlab=\"Longitud de Genes\", col=\"green\", border=\"black\")",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>(Re)introducción a R para Biología y Bioinformática</span>"
    ]
  },
  {
    "objectID": "reintro_a_r.html#lectura-de-archivos",
    "href": "reintro_a_r.html#lectura-de-archivos",
    "title": "1  (Re)introducción a R para Biología y Bioinformática",
    "section": "1.6 Lectura de Archivos",
    "text": "1.6 Lectura de Archivos\nEn bioinformática, es común trabajar con datos almacenados en archivos. R proporciona funciones para leer varios tipos de archivos, incluyendo archivos de texto, CSV y Excel.\n\n1.6.1 Lectura de un Archivo CSV\nVamos a leer un archivo CSV con información de expresión génica en diferentes condiciones experimentales. Primero, crearemos un archivo CSV simple.\n\n1.6.1.1 Creación de un Archivo CSV\nGuarda el siguiente contenido en un archivo llamado gene_expression.csv:\nGene,Condition1,Condition2\nGeneA,5.2,4.8\nGeneB,3.8,3.2\nGeneC,4.5,5.0\nGeneD,6.0,6.5\nGeneE,2.9,3.1\n\n\n1.6.1.2 Lectura del Archivo CSV\nUtiliza la función read.csv() para leer el archivo CSV en un data frame.\nPrimero hay que descargar el fichero gene_expression.csv\nAbre el fichero - ¿entiendes lo que representa a simple vista?\nPara abrirlo, es necesario especificar en qué carpeta está el fichero o moverlo a la carpeta donde estás ejecutando el código. En el siguiente código, suponemos que el fichero está en la carpeta donde estás ejecutando el código.\n\n# Leer el archivo CSV\ngene_file &lt;- \"gene_expression.csv\"\ngene_data &lt;- read.csv(gene_file)\n\n# Mostrar el contenido del data frame\nprint(gene_data)\n\n\n\n## Introducción al Análisis de Redes con `igraph`\n\nEl análisis de redes es un aspecto crucial de la bioinformática, especialmente en la comprensión de vías e interacciones biológicas. El paquete `igraph` en R es una herramienta poderosa para crear y analizar grafos.\n\n### Instalación y Carga de `igraph`\n\nPrimero, necesitas cargar el paquete `igraph`.\n\n¿Qué es un Paquete en R? En R, un paquete es una colección de funciones, datos y código que extienden las capacidades básicas del lenguaje. Los paquetes son creados por la comunidad de R y están diseñados para abordar tareas específicas, desde análisis estadísticos avanzados hasta visualización de datos y manejo de datos biológicos. Los paquetes facilitan el trabajo con R al proporcionar herramientas adicionales que puedes usar en tus scripts y análisis.\n\nInstalación y Carga de Paquetes Para utilizar un paquete en R, primero necesitas instalarlo (si no está ya instalado) y luego cargarlo en tu sesión de R.\n\nInstalación de Paquetes Puedes instalar un paquete desde CRAN (Comprehensive R Archive Network) utilizando la función install.packages():\n\nAhora vamos a cargar un paquee que ya esta instalado, usando el comando library()\n\n::: {.cell}\n\n```{.r .cell-code}\n# Cargar paquete igraph\nlibrary(igraph)\n\n\nAttaching package: 'igraph'\n\n\nThe following objects are masked from 'package:stats':\n\n    decompose, spectrum\n\n\nThe following object is masked from 'package:base':\n\n    union\n\n:::\n\n\n\n1.6.2 Creación de una Red Simple\nRepresentar proteínas en un formato de red puede ser útil por varias razones:\n\nVisualización de Interacciones: Permite ver cómo las proteínas interactúan entre sí y formar una visión general de las redes de interacción.\nIdentificación de Proteínas Clave: Ayuda a identificar proteínas que tienen un papel central o que son esenciales en la red.\nAnálisis de Funciones Biológicas: Facilita la comprensión de las funciones biológicas y cómo las alteraciones en una proteína pueden afectar toda la red.\n\nVamos a crear una red simple de interacciones proteína-proteína.\n\n# Definir aristas (interacciones) entre proteínas\nedges &lt;- c(\"ProteinA\", \"ProteinB\",\n           \"ProteinA\", \"ProteinC\",\n           \"ProteinB\", \"ProteinC\",\n           \"ProteinB\", \"ProteinD\",\n           \"ProteinB\", \"ProteinE\",\n           \"ProteinC\", \"ProteinE\")\n\n# Crear un objeto de grafo\ng &lt;- graph(edges, directed=FALSE)\n\n# Graficar el grafo\nplot(g, vertex.label=V(g)$name, main=\"Red de Interacción Proteína-Proteína\")\n\n\n\n\n\n\n\n\n\n\n1.6.3 Análisis de la Red\nPuedes realizar varios análisis en la red, como encontrar el grado de cada nodo.\n\n# Calcular el grado de cada nodo\ndegree(g)\n\nProteinA ProteinB ProteinC ProteinD ProteinE \n       2        4        3        1        2 \n\n# Graficar el grafo con tamaños de nodo proporcionales a su grado\nplot(g, vertex.size=degree(g)*10, vertex.label=V(g)$name, main=\"Red de Interacción Proteína-Proteína (Tamaño del Nodo ~ Grado)\")",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>(Re)introducción a R para Biología y Bioinformática</span>"
    ]
  },
  {
    "objectID": "reintro_a_r.html#conclusión",
    "href": "reintro_a_r.html#conclusión",
    "title": "1  (Re)introducción a R para Biología y Bioinformática",
    "section": "1.7 Conclusión",
    "text": "1.7 Conclusión\nAhora has sido introducido a los conceptos básicos de la programación en R con ejemplos relevantes para la biología y la bioinformática. Hemos cubierto operaciones aritméticas básicas, asignación de variables, tipos de datos, estructuras de datos, graficación simple y una introducción al análisis de redes con igraph. Continúa practicando para familiarizarte más con R y explora temas más avanzados a medida que progresas.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>(Re)introducción a R para Biología y Bioinformática</span>"
    ]
  },
  {
    "objectID": "hpo_redes1.html",
    "href": "hpo_redes1.html",
    "title": "2  Redes 1: HPO y STRINGdb",
    "section": "",
    "text": "2.1 Antecedentes",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Redes 1: HPO y STRINGdb</span>"
    ]
  },
  {
    "objectID": "hpo_redes1.html#antecedentes",
    "href": "hpo_redes1.html#antecedentes",
    "title": "2  Redes 1: HPO y STRINGdb",
    "section": "",
    "text": "2.1.1 Human Phenotype Ontology\nLa Human Phenotype Ontology (HPO), es un marco integral diseñado para catalogar y clasificar las anomalías fenotípicas humanas asociadas con trastornos genéticos. En este contexto, un fenotipo patológico se refiere a cualquier característica observable o medible anómala que resulta de una mutación genética u otra patología subyacente. Estos fenotipos pueden variar desde anomalías físicas hasta discapacidades funcionales y son cruciales para el diagnóstico y la comprensión de condiciones genéticas.\nEs importante distinguir entre un fenotipo patológico y una enfermedad. Un fenotipo patológico es una característica o signo específico de una condición subyacente, pero no es una enfermedad por sí mismo. Una enfermedad, en cambio, es un término más amplio que abarca una colección de fenotipos patológicos y otros factores, como causas genéticas, ambientales o infecciosas. En esencia, mientras que los fenotipos patológicos son manifestaciones individuales de una enfermedad, las enfermedades son diagnósticos más completos que incluyen una combinación de estas manifestaciones junto con factores clínicos, genéticos y, a veces, ambientales.\n\n\n2.1.2 STRINGdb\nSTRINGdb (Search Tool for the Retrieval of Interacting Genes/Proteins Database) es una base de datos que proporciona información detallada sobre interacciones entre proteínas en diversas especies. Su objetivo principal es ofrecer un recurso integral para la predicción, el análisis y la visualización de redes de interacciones proteicas.\nSTRINGdb integra datos provenientes de una variedad de fuentes, incluyendo experimentos de laboratorio, estudios de co-expresión génica, datos de literatura científica y bases de datos de interacciones conocidas. Esto permite a los usuarios explorar y descubrir cómo las proteínas interactúan entre sí dentro de las células, contribuyendo a una mejor comprensión de los procesos biológicos y las redes de señalización.\nLa plataforma no solo permite la búsqueda de interacciones específicas, sino que también facilita la visualización de redes de proteínas, lo que ayuda a los investigadores a identificar posibles relaciones funcionales y a formular hipótesis sobre mecanismos biológicos subyacentes. Además, STRINGdb ofrece herramientas para integrar estos datos con información genómica y fenotípica, apoyando así el análisis y la interpretación de datos experimentales en contextos biológicos y biomédicos.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Redes 1: HPO y STRINGdb</span>"
    ]
  },
  {
    "objectID": "hpo_redes1.html#objetivos",
    "href": "hpo_redes1.html#objetivos",
    "title": "2  Redes 1: HPO y STRINGdb",
    "section": "2.2 Objetivos",
    "text": "2.2 Objetivos\nIn this practical, you will learn how to download a list of genes related to a specific HPO term (i.e. phenotype), and use them to build a protein interaction network in which the nodes of the networks represent proteins encoded by the disease associated genes, and the links in the network represent interactions and associations between the proteins. These interactions are obtained from the STRINGdb database.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Redes 1: HPO y STRINGdb</span>"
    ]
  },
  {
    "objectID": "hpo_redes1.html#obtaining-a-list-of-genes-associated-with-an-hpo-term.",
    "href": "hpo_redes1.html#obtaining-a-list-of-genes-associated-with-an-hpo-term.",
    "title": "2  Redes 1: HPO y STRINGdb",
    "section": "2.3 Obtaining a list of genes associated with an HPO term.",
    "text": "2.3 Obtaining a list of genes associated with an HPO term.\nFor the purpose of this practical, we are going to use the HPO term XXX.\n\n2.3.1 From the HPO website\nThe first step is to obtain the list of genes.\n\n\n2.3.2 Programatically.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Redes 1: HPO y STRINGdb</span>"
    ]
  },
  {
    "objectID": "hpo_redes1.html#querying-stringdb-with-a-list-of-genes",
    "href": "hpo_redes1.html#querying-stringdb-with-a-list-of-genes",
    "title": "2  Redes 1: HPO y STRINGdb",
    "section": "2.4 Querying STRINGdb with a list of genes",
    "text": "2.4 Querying STRINGdb with a list of genes\nTo query STRINGdb with a list of genes and then convert the results into an igraph object for visualization and analysis, follow these steps:\n\n2.4.1 Step 1: Query STRINGdb with a List of Genes\n\nInstall Required Packages: Ensure you have the necessary R packages installed: STRINGdb, igraph, and ggplot2 for visualization.\ninstall.packages(\"STRINGdb\")\ninstall.packages(\"igraph\")\ninstall.packages(\"ggplot2\")\nLoad Required Libraries:\nlibrary(STRINGdb)\nlibrary(igraph)\nlibrary(ggplot2)\nInitialize STRINGdb: Create an instance of the STRINGdb object. The version of STRINGdb may vary; ensure you use the appropriate one for your needs.\nstring_db &lt;- STRINGdb$new(version = \"11.5\", species = 9606)  # Human genome\nPrepare Your List of Genes: Create a list of gene symbols you want to query. For example:\ngene_list &lt;- c(\"BRCA1\", \"TP53\", \"MYC\", \"EGFR\")\nMap Gene Symbols to STRING IDs: Convert gene symbols to STRING IDs using the map function. This step ensures that the genes are recognized by STRINGdb.\ngene_ids &lt;- string_db$map(gene_list, \"gene_name\", removeUnmapped = FALSE)\nRetrieve Interactions: Query STRINGdb to get the interactions for the list of genes.\ninteractions &lt;- string_db$get_interactions(gene_ids$STRING_id)\n\n\n\n2.4.2 Step 2: Convert Results into an igraph Object\n\nCreate an Edge List: Extract the relevant information (e.g., interaction scores) from the STRINGdb results to create an edge list for igraph.\nedge_list &lt;- interactions[, c(\"protein1\", \"protein2\", \"combined_score\")]\nBuild the igraph Object: Create an igraph object from the edge list. This will be used for network visualization and analysis.\ng &lt;- graph_from_data_frame(d = edge_list, directed = FALSE)\nVisualize the Network: Use igraph and ggplot2 to visualize the network. Customize the plot as needed.\n# Basic plot\nplot(g, vertex.label = V(g)$name, edge.width = E(g)$combined_score / 100, \n     vertex.size = 5, vertex.label.cex = 0.7, main = \"Protein Interaction Network\")\n\n# Optional: Advanced visualization using ggplot2\nlibrary(ggraph)\nggraph(g, layout = 'fr') + \n  geom_edge_link(aes(width = E(g)$combined_score / 100)) + \n  geom_node_point(size = 5) + \n  geom_node_text(aes(label = name), repel = TRUE) +\n  theme_graph()\n\n\n\n2.4.3 Descripción de los Pasos\n\nInstalación y Carga de Paquetes: Primero, necesitas instalar y cargar los paquetes necesarios en R para trabajar con STRINGdb y crear gráficos con igraph.\nInicialización de STRINGdb: Configura STRINGdb para el organismo de interés (en este caso, humanos) y especifica la versión deseada.\nPreparación de la Lista de Genes: Crea una lista de símbolos de genes para los cuales deseas obtener interacciones.\nMapeo de Símbolos a IDs de STRING: Convierte los nombres de los genes en identificadores utilizados por STRINGdb.\nConsulta de Interacciones: Obtén las interacciones entre las proteínas correspondientes a los genes de interés.\nCreación de una Lista de Aristas: Extrae los pares de proteínas y las puntuaciones de las interacciones para construir una lista de aristas para igraph.\nConstrucción del Objeto igraph: Usa la lista de aristas para construir un grafo en igraph, que permite realizar análisis de redes y visualizaciones.\nVisualización de la Red: Representa gráficamente la red de interacciones de proteínas, lo cual puede ayudarte a identificar patrones y relaciones en los datos.\n\nSiguiendo estos pasos, podrás consultar STRINGdb, convertir los datos en un formato adecuado para análisis de redes y visualizar las interacciones entre proteínas en R.\nText and code to get genes from HPO and use them to create networks",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Redes 1: HPO y STRINGdb</span>"
    ]
  },
  {
    "objectID": "hpo_redes2.html",
    "href": "hpo_redes2.html",
    "title": "3  Redes 2: Clusterizacion y Enriquecimiento Funcional",
    "section": "",
    "text": "Text and code to cluster the network and perform functional enrichment.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Redes 2: Clusterizacion y Enriquecimiento Funcional</span>"
    ]
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "Recursos Adicionales",
    "section": "",
    "text": "Aquí hay algunos recursos para ayudarte a seguir aprendiendo R y bioinformática: - Documentación de R - Bioconductor - Hojas de Referencia de RStudio",
    "crumbs": [
      "Recursos Adicionales"
    ]
  }
]