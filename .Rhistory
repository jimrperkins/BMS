x <- c(1, 2, 3, 4)
y <- c(10, 20, 15, 25)
plot(x, y, main = "GrÃ¡fico de Ejemplo", xlab = "Eje X", ylab = "Eje Y")
# Install necessary packages if not already installed
if (!requireNamespace("httr", quietly = TRUE)) {
install.packages("httr")
}
if (!requireNamespace("jsonlite", quietly = TRUE)) {
install.packages("jsonlite")
}
library(httr)
library(jsonlite)
# API request to get genes associated with the HPO term for abnormal renal corpuscle morphology
hpo_id <- "HP:0031263"  # HPO ID for abnormal renal corpuscle morphology
url <- paste0("https://ontology.jax.org/api/network/annotation/", hpo_id)
response <- GET(url)
data <- content(response, as = "text", encoding = "UTF-8")
genes <- fromJSON(data)$genes
# Display the first few genes
head(genes)
# Display all the genes
print(genes)
# Install the STRINGdb package if not already installed
if (!requireNamespace("STRINGdb", quietly = TRUE)) {
install.packages("STRINGdb")
}
library(STRINGdb)
# Initialize STRINGdb with the appropriate version and species
string_db <- STRINGdb$new(version = "12", species = 9606, score_threshold = 800, input_directory = "")
# Fetch interactions for the gene list
# Replace 'genes' with your actual gene list variable
gene_ids <- genes$name  # Adjust according to your downloaded data structure
string_ids <- string_db$map( genes, "name", removeUnmappedRows = TRUE )
interaction_network <- string_db$get_interactions(string_ids$STRING_id)
interaction_network <- unique(interaction_network[, 1:2]) # necessary step to remove duplicate interactions
interaction_network$to <- string_ids$name[match(interaction_network$to, string_ids$STRING_id)]
interaction_network$from <- string_ids$name[match(interaction_network$from, string_ids$STRING_id)]
# Display the first few rows of the interaction network
head(interaction_network)
# Install igraph if it's not already installed
if (!requireNamespace("igraph", quietly = TRUE)) {
install.packages("igraph")
}
library(igraph)
# Convert the interaction network downloaded from STRING into igraph format
g <- graph_from_data_frame(interaction_network, directed = FALSE)
# Calculate numbers of nodes and edges
num_nodes <- gorder(g)  # Number of nodes
num_edges <- gsize(g)  # Number of edges
g <- graph_from_data_frame(interaction_network, directed = FALSE)
