x <- c(1, 2, 3, 4)
y <- c(10, 20, 15, 25)
plot(x, y, main = "Gráfico de Ejemplo", xlab = "Eje X", ylab = "Eje Y")
# Install necessary packages if not already installed
if (!requireNamespace("httr", quietly = TRUE)) {
install.packages("httr")
}
if (!requireNamespace("jsonlite", quietly = TRUE)) {
install.packages("jsonlite")
}
library(httr)
library(jsonlite)
# API request to get genes associated with the HPO term for abnormal renal corpuscle morphology
hpo_id <- "HP:0031263"  # HPO ID for abnormal renal corpuscle morphology
url <- paste0("https://ontology.jax.org/api/network/annotation/", hpo_id)
response <- GET(url)
data <- content(response, as = "text", encoding = "UTF-8")
genes <- fromJSON(data)$genes
# Display the first few genes
head(genes)
# Display all the genes
print(genes)
# Install the STRINGdb package if not already installed
if (!requireNamespace("STRINGdb", quietly = TRUE)) {
install.packages("STRINGdb")
}
library(STRINGdb)
# Initialize STRINGdb with the appropriate version and species
string_db <- STRINGdb$new(version = "12", species = 9606, score_threshold = 800, input_directory = "")
# Fetch interactions for the gene list
# Replace 'genes' with your actual gene list variable
gene_ids <- genes$name  # Adjust according to your downloaded data structure
string_ids <- string_db$map( genes, "name", removeUnmappedRows = TRUE )
interaction_network <- string_db$get_interactions(string_ids$STRING_id)
interaction_network <- unique(interaction_network[, 1:2]) # necessary step to remove duplicate interactions
interaction_network$to <- string_ids$name[match(interaction_network$to, string_ids$STRING_id)]
interaction_network$from <- string_ids$name[match(interaction_network$from, string_ids$STRING_id)]
# Display the first few rows of the interaction network
head(interaction_network)
# Install igraph if it's not already installed
if (!requireNamespace("igraph", quietly = TRUE)) {
install.packages("igraph")
}
library(igraph)
# Convert the interaction network downloaded from STRING into igraph format
g <- graph_from_data_frame(interaction_network, directed = FALSE)
# Calculate numbers of nodes and edges
num_nodes <- gorder(g)  # Number of nodes
num_edges <- gsize(g)  # Number of edges
cat("Number of nodes:", num_nodes, "\n")
cat("Number of edges:", num_edges, "\n")
# Calculate the degree (grado) of every node
degree_values <- degree(g)
# Calculate the average
average_degree <- mean(degree_values)
cat("Average degree of all nodes:", average_degree, "\n")
# Calculate the density of the network
network_density <- edge_density(g)
cat("Network density:", network_density, "\n")
# Calculate Closeness Centrality (centralidad de cercanía)
centrality_closeness <- closeness(g)
# Show results
cat("Closeness Centrality (first 5 nodos):", head(centrality_closeness, 5), "\n")
# Basic plot of the network
plot(g, vertex.size=5, vertex.label.cex=0.7, edge.arrow.size=0.5, main="Basic Interaction Network")
# Basic plot of the network
plot(g, vertex.size=5, vertex.label.cex=0.3, edge.arrow.size=0.5, main="Basic Interaction Network")
# Basic plot of the network
plot(g, vertex.size=5, vertex.label.cex=0.4, edge.arrow.size=0.5, main="Basic Interaction Network")
# Basic plot of the network
plot(g, vertex.size=5, vertex.label.cex=0.5, edge.arrow.size=0.5, main="Basic Interaction Network")
# Basic plot of the network
plot(g, vertex.size=5, vertex.label.cex=0.7, edge.arrow.size=0.5, main="Basic Interaction Network")
# Basic plot of the network
plot(g, vertex.size=5, vertex.label.cex=0.7, edge.arrow.size=0.5, vertex.label.dist=2,  main="Basic Interaction Network")
# Basic plot of the network
plot(g, vertex.size=5, vertex.label.cex=0.7, edge.arrow.size=0.5, vertex.label.dist=5,  main="Basic Interaction Network")
# Basic plot of the network
plot(g, vertex.size=5, vertex.label.cex=0.3, edge.arrow.size=0.5, vertex.label.dist=5,  main="Basic Interaction Network")
# Basic plot of the network
plot(g, vertex.size=5, vertex.label.cex=0.7, edge.arrow.size=0.5,  main="Basic Interaction Network")
# Basic plot of the network
plot(g, vertex.shape="none", vertex.size=5, vertex.label.cex=0.7, edge.arrow.size=0.5,  main="Basic Interaction Network")
# Basic plot of the network
plot(g, vertex.size=degree(g), vertex.label.cex=0.7, edge.arrow.size=0.5,  main="Basic Interaction Network")
# Basic plot of the network
plot(g, vertex.size=degree(g), vertex.label.cex=0, edge.arrow.size=0.5,  main="Basic Interaction Network")
# Basic plot of the network
plot(g, vertex.size=degree(g), vertex.label.cex=NA, edge.arrow.size=0.5,  main="Basic Interaction Network")
# Basic plot of the network
plot(g, vertex.size=degree(g), vertex.label.cex=NA, edge.arrow.size=0.9,  main="Basic Interaction Network")
# Basic plot of the network
plot(g, vertex.size=degree(g), vertex.label.cex=NA, edge.arrow.size=0.5,  main="Basic Interaction Network")
# Basic plot of the network
plot(g, vertex.size=degree(g), vertex.label = NA edge.arrow.size=0.5,  main="Network by degree")
# Basic plot of the network
plot(g, vertex.size=degree(g), vertex.label = NA, edge.arrow.size=0.5,  main="Network by degree")
# Basic plot of the network
plot(g, vertex.size=degree(g)*3, vertex.label = NA, edge.arrow.size=0.5,  main="Network by degree")
# Basic plot of the network
plot(g, vertex.size=degree(g)/2, vertex.label = NA, edge.arrow.size=0.5,  main="Network by degree")
# Basic plot of the network
plot(g, vertex.size=degree(g)/2, vertex.label = NA, edge.arrow.size=1,  main="Network by degree")
# Basic plot of the network
plot(g, vertex.size=degree(g)/2, vertex.label = NA, edge.arrow.size=5,  main="Network by degree")
# Basic plot of the network
plot(g, vertex.size=degree(g), vertex.label = NA, edge.arrow.size=5,  main="Network by degree")
# Basic plot of the network
plot(g, vertex.size=degree(g)/2, vertex.label = NA, edge.arrow.size=5,  main="Network by degree")
# Basic plot of the network
plot(g, vertex.size=degree(g)/2, vertex.label = NA, edge.arrow.size=1,  main="Network by degree")
# Basic plot of the network
plot(g, vertex.size=degree(g)/2, vertex.label = NA, edge.arrow.size=0.7,  main="Network by degree")
# Basic plot of the network
plot(g, vertex.size=degree(g)/2, vertex.label = NA, edge.arrow.size=0.7,  main="Network by degree")
# Basic plot of the network
plot(g, vertex.size=degree(g)/2, vertex.label = NA, edge.arrow.size=0.7, vertex.label.cex=0.7, main="Network by degree")
# Basic plot of the network
plot(g, vertex.size=degree(g)/2, edge.arrow.size=0.7, vertex.label.cex=0.7, main="Network by degree")
# Basic plot of the network
plot(g, vertex.size=degree(g)/2, edge.arrow.size=0.7, vertex.label.cex=0.3, main="Network by degree")
# Basic plot of the network
plot(g, vertex.size=degree(g)/2, edge.arrow.size=0.7, vertex.label.cex=0.4, main="Network by degree")
# Basic plot of the network
plot(g, vertex.size=degree(g)/2, edge.arrow.size=0.7, vertex.label.cex=0.5, main="Network by degree")
# Basic plot of the network
plot(g, vertex.size=degree(g)/2, edge.arrow.size=0.7, vertex.label.cex=0.8, main="Network by degree")
# Basic plot of the network
plot(g, vertex.size=degree(g)/2, vertex.label = NA, edge.arrow.size=0.7, edge.color = "gray", vertex.color = "skyblue", main="Network by degree")
# Basic plot of the network
plot(g, vertex.size=degree(g)/2, vertex.label = NA, edge.arrow.size=0.7, edge.color = "gray",vertex.label.cex=0.8, vertex.color = "skyblue", main="Network by degree")
# Basic plot of the network
plot(g, vertex.size=degree(g)/2, edge.arrow.size=0.7, edge.color = "gray",vertex.label.cex=0.8, vertex.color = "skyblue", main="Network by degree")
# Basic plot of the network
plot(g, vertex.size=degree(g)/2, edge.arrow.size=0.7, edge.color = "gray",vertex.label.cex=0.4, vertex.color = "skyblue", main="Network by degree")
# Basic plot of the network
plot(g, vertex.size=degree(g)/2, edge.arrow.size=0.7, edge.color = "gray",vertex.label.cex=0.6, vertex.color = "skyblue", main="Network by degree")
# Basic plot of the network
plot(g, vertex.size=degree(g)/2, edge.arrow.size=0.7, vertex.label.cex=0.8, main="Network by degree")
# Help page access
?layout_in_circle  # Recuerda cómo acceder a las páginas de ayuda
# Plot with circular layout
circular_layout <- layout_in_circle(g)
plot(g, layout = circular_layout, vertex.color = "lightgreen", vertex.size = 5, edge.width = 0.5, main = "Circular Layout")
# Calculate Closeness Centrality (centralidad de cercanía)
centrality_closeness <- closeness(g)
# Show results
cat("Closeness Centrality (first 5 nodos):", head(centrality_closeness, 5), "\n")
# Basic plot of the network
plot(g, vertex.size=5, vertex.label.cex=0.7, edge.arrow.size=0.5,  main="Basic Interaction Network")
# Basic plot of the network
plot(g, vertex.size=degree(g)/2, edge.arrow.size=0.7, vertex.label.cex=0.8, main="Network by degree")
layout <- layout_with_fr(g)  # Fruchterman-Reingold layout
plot(g, layout = layout, vertex.color = "skyblue", vertex.size = 5, edge.width = 0.5, main = "Fruchterman-Reingold Layout")
# Help page access
?layout_in_circle  # Recuerda cómo acceder a las páginas de ayuda
# Plot with circular layout
circular_layout <- layout_in_circle(g)
plot(g, layout = circular_layout, vertex.color = "lightgreen", vertex.size = 5, edge.width = 0.5, main = "Circular Layout")
# Plot with nicely layout
nice_layout <- layout_nicely(g)
plot(g, layout = nice_layout, vertex.color = "orange", vertex.size = 5, edge.width = 0.5, main = "Nicely Layout")
# Plot with nicely layout
nice_layout <- layout_nicely(g)
plot(g, layout = nice_layout, vertex.color = "orange", vertex.size = 2, edge.width = 0.5, main = "Nicely Layout")
# Plot with nicely layout
nice_layout <- layout_nicely(g)
plot(g, layout = nice_layout, vertex.color = "orange", vertex.size = 5,vertex.label.cex=0.8, edge.width = 0.5, main = "Nicely Layout")
# Help page access
?layout_in_circle  # Recuerda cómo acceder a las páginas de ayuda
# Plot with circular layout
circular_layout <- layout_in_circle(g)
plot(g, layout = circular_layout, vertex.color = "lightgreen", vertex.size = 5, vertex.label.cex=0.8, edge.width = 0.5, main = "Circular Layout")
# Help page access
?layout_in_circle  # Recuerda cómo acceder a las páginas de ayuda
# Plot with circular layout
circular_layout <- layout_in_circle(g)
plot(g, layout = circular_layout, vertex.color = "lightgreen", vertex.size = 5, vertex.label.cex=0.8, vertex.label.dist	=1,edge.width = 0.5, main = "Circular Layout")
# Help page access
?layout_in_circle  # Recuerda cómo acceder a las páginas de ayuda
# Plot with circular layout
circular_layout <- layout_in_circle(g)
plot(g, layout = circular_layout, vertex.color = "lightgreen", vertex.size = 5, vertex.label.cex=0.8, vertex.label.dist	=30,edge.width = 0.5, main = "Circular Layout")
# Help page access
?layout_in_circle  # Recuerda cómo acceder a las páginas de ayuda
# Plot with circular layout
circular_layout <- layout_in_circle(g)
plot(g, layout = circular_layout, vertex.color = "lightgreen", vertex.size = 5, vertex.label.cex=0.8, vertex.label.dist	=3,edge.width = 0.5, main = "Circular Layout")
# Help page access
?layout_in_circle  # Recuerda cómo acceder a las páginas de ayuda
# Plot with circular layout
circular_layout <- layout_in_circle(g)
plot(g, layout = circular_layout, vertex.color = "lightgreen", vertex.size = 5, vertex.label.cex=0.8, vertex.label.dist	=1,edge.width = 0.5, main = "Circular Layout")
# Help page access
?layout_in_circle  # Recuerda cómo acceder a las páginas de ayuda
# Plot with circular layout
circular_layout <- layout_in_circle(g)
plot(g, layout = circular_layout, vertex.color = "lightgreen", vertex.size = 5, vertex.label.cex=0.8, vertex.label.dist	=-1,edge.width = 0.5, main = "Circular Layout")
# Help page access
?layout_in_circle  # Recuerda cómo acceder a las páginas de ayuda
# Plot with circular layout
circular_layout <- layout_in_circle(g)
plot(g, layout = circular_layout, vertex.color = "lightgreen", vertex.size = 5, vertex.label.cex=0.8, vertex.label.dist	=0.5,edge.width = 0.5, main = "Circular Layout")
# Help page access
?layout_in_circle  # Recuerda cómo acceder a las páginas de ayuda
# Plot with circular layout
circular_layout <- layout_in_circle(g)
plot(g, layout = circular_layout, vertex.color = "lightgreen", vertex.size = 5, vertex.label.cex=0.8, vertex.label.dist	=-0.5,edge.width = 0.5, main = "Circular Layout")
# Help page access
?layout_in_circle  # Recuerda cómo acceder a las páginas de ayuda
# Plot with circular layout
circular_layout <- layout_in_circle(g)
plot(g, layout = circular_layout, vertex.color = "lightgreen", vertex.size = 5, vertex.label.cex=0.8,edge.width = 0.5, main = "Circular Layout")
# Install necessary packages if not already installed
if (!requireNamespace("httr", quietly = TRUE)) {
install.packages("httr")
}
if (!requireNamespace("jsonlite", quietly = TRUE)) {
install.packages("jsonlite")
}
library(httr)
library(jsonlite)
# API request to get genes associated with the HPO term for abnormal renal corpuscle morphology
hpo_id <- "HP:0031263"  # HPO ID for abnormal renal corpuscle morphology
hpo_id <- "HP:0007354"
url <- paste0("https://ontology.jax.org/api/network/annotation/", hpo_id)
response <- GET(url)
data <- content(response, as = "text", encoding = "UTF-8")
genes <- fromJSON(data)$genes
# Display the first few genes
head(genes)
# Display all the genes
print(genes)
# Install necessary packages if not already installed
if (!requireNamespace("httr", quietly = TRUE)) {
install.packages("httr")
}
if (!requireNamespace("jsonlite", quietly = TRUE)) {
install.packages("jsonlite")
}
library(httr)
library(jsonlite)
# API request to get genes associated with the HPO term for abnormal renal corpuscle morphology
hpo_id <- "HP:0031263"  # HPO ID for abnormal renal corpuscle morphology
#hpo_id <- "HP:0007354"
url <- paste0("https://ontology.jax.org/api/network/annotation/", hpo_id)
response <- GET(url)
data <- content(response, as = "text", encoding = "UTF-8")
genes <- fromJSON(data)$genes
# Display the first few genes
head(genes)
# Display all the genes
print(genes)
# Install necessary packages if not already installed
if (!requireNamespace("httr", quietly = TRUE)) {
install.packages("httr")
}
if (!requireNamespace("jsonlite", quietly = TRUE)) {
install.packages("jsonlite")
}
library(httr)
library(jsonlite)
# API request to get genes associated with the HPO term for abnormal renal corpuscle morphology
hpo_id <- "HP:0031263"  # HPO ID for abnormal renal corpuscle morphology
hpo_id <- "HP:0007354"
url <- paste0("https://ontology.jax.org/api/network/annotation/", hpo_id)
response <- GET(url)
data <- content(response, as = "text", encoding = "UTF-8")
genes <- fromJSON(data)$genes
# Display the first few genes
head(genes)
# Display all the genes
print(genes)
# Install the STRINGdb package if not already installed
if (!requireNamespace("STRINGdb", quietly = TRUE)) {
install.packages("STRINGdb")
}
library(STRINGdb)
# Initialize STRINGdb with the appropriate version and species
string_db <- STRINGdb$new(version = "12", species = 9606, score_threshold = 800, input_directory = "")
# Fetch interactions for the gene list
# Replace 'genes' with your actual gene list variable
gene_ids <- genes$name  # Adjust according to your downloaded data structure
string_ids <- string_db$map( genes, "name", removeUnmappedRows = TRUE )
interaction_network <- string_db$get_interactions(string_ids$STRING_id)
interaction_network <- unique(interaction_network[, 1:2]) # necessary step to remove duplicate interactions
interaction_network$to <- string_ids$name[match(interaction_network$to, string_ids$STRING_id)]
interaction_network$from <- string_ids$name[match(interaction_network$from, string_ids$STRING_id)]
# Display the first few rows of the interaction network
head(interaction_network)
# Install igraph if it's not already installed
if (!requireNamespace("igraph", quietly = TRUE)) {
install.packages("igraph")
}
library(igraph)
# Convert the interaction network downloaded from STRING into igraph format
g <- graph_from_data_frame(interaction_network, directed = FALSE)
# Calculate numbers of nodes and edges
num_nodes <- gorder(g)  # Number of nodes
num_edges <- gsize(g)  # Number of edges
cat("Number of nodes:", num_nodes, "\n")
cat("Number of edges:", num_edges, "\n")
degree_values
# Calculate the degree (grado) of every node
degree_values <- degree(g)
# Calculate the average
average_degree <- mean(degree_values)
cat("Average degree of all nodes:", average_degree, "\n")
degree_values
degree_values[degree_values==2]
degree_values[degree_values==1]
# Calculate the density of the network
network_density <- edge_density(g)
cat("Network density:", network_density, "\n")
# Calculate Closeness Centrality (centralidad de cercanía)
centrality_closeness <- closeness(g)
# Show results
cat("Closeness Centrality (first 5 nodos):", head(centrality_closeness, 5), "\n")
